{"ast":null,"code":"var _jsxFileName = \"/Users/afreddo/Portfolio/EV-Assist/frontend/src/pages/SearchPage.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { useNavigate } from \"react-router-dom\";\nimport LocationTable from '../components/LocationTable.js';\nimport axios from \"axios\";\nimport AddressInput from '../components/AddressInput.js';\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const SearchPage = () => {\n  _s();\n  const [locationData, setLocationData] = useState([]);\n  const [streetName, setStreetName] = useState(\"\");\n  const [city, setCity] = useState(\"\");\n  const [state, setState] = useState(\"\");\n  const redirect = useNavigate();\n  function getStation() {\n    var streetName_arr = streetName.split(\" \");\n    var streetName_ready = streetName_arr.join('+');\n    var city_arr = city.split(\" \");\n    var city_ready = city_arr.join('+');\n    var state_arr = state.split(\" \");\n    var state_ready = state_arr.join('+');\n    axios({\n      method: \"GET\",\n      url: \"/station/\" + streetName_ready + \"+\" + city_ready + \"+\" + state_ready\n    }).then(response => {\n      const res = response.data;\n      setLocationData({\n        location: res.location,\n        name: res.name,\n        distance: res.distance\n      });\n    }).catch(error => {\n      if (error.response) {\n        console.log(error.response);\n        console.log(error.response.status);\n        console.log(error.response.headers);\n      }\n    });\n    redirect(\"/\");\n  }\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Search for nearest EV Station\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Need to fill out with info about the search.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(AddressInput, {\n      streetName: streetName,\n      setStreetName: setStreetName,\n      city: city,\n      setCity: setCity,\n      state: state,\n      setState: setState\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"To find nearby stations: \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: getStation,\n      children: \"Click me\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n};\n_s(SearchPage, \"H0BjJWRnRnMZiYzNxhU/5LXmP/0=\", false, function () {\n  return [useNavigate];\n});\n_c = SearchPage;\nexport default SearchPage;\nvar _c;\n$RefreshReg$(_c, \"SearchPage\");","map":{"version":3,"names":["React","useState","useNavigate","LocationTable","axios","AddressInput","SearchPage","locationData","setLocationData","streetName","setStreetName","city","setCity","state","setState","redirect","getStation","streetName_arr","split","streetName_ready","join","city_arr","city_ready","state_arr","state_ready","method","url","then","response","res","data","location","name","distance","catch","error","console","log","status","headers"],"sources":["/Users/afreddo/Portfolio/EV-Assist/frontend/src/pages/SearchPage.js"],"sourcesContent":["import React, { useState } from 'react';\nimport { useNavigate } from \"react-router-dom\";\nimport LocationTable from '../components/LocationTable.js';\nimport axios from \"axios\";\nimport AddressInput from '../components/AddressInput.js';\n\nexport const SearchPage = () => {\n\n    const [locationData, setLocationData] = useState([]);\n    const [streetName, setStreetName] = useState(\"\");\n    const [city, setCity] = useState(\"\");\n    const [state, setState] = useState(\"\");\n\n    const redirect = useNavigate();\n\n    function getStation() {\n        var streetName_arr = streetName.split(\" \")\n        var streetName_ready = streetName_arr.join('+')\n        var city_arr = city.split(\" \")\n        var city_ready = city_arr.join('+')\n        var state_arr = state.split(\" \")\n        var state_ready = state_arr.join('+')\n        axios({\n          method: \"GET\",\n          url:\"/station/\" + streetName_ready + \"+\" + city_ready + \"+\" + state_ready,\n        })\n        .then((response) => {\n          const res =response.data\n          setLocationData(({\n            location: res.location,\n            name: res.name,\n            distance: res.distance\n            }))\n        }).catch((error) => {\n          if (error.response) {\n            console.log(error.response)\n            console.log(error.response.status)\n            console.log(error.response.headers)\n            }\n        })\n        redirect(\"/\")\n      }\n\n    return (\n        <>\n            <h2>Search for nearest EV Station</h2>\n                <p>Need to fill out with info about the search.</p>\n\n                <AddressInput \n                  streetName={streetName}\n                  setStreetName={setStreetName}\n                  city={city}\n                  setCity={setCity}\n                  state={state}\n                  setState={setState}\n                />\n\n            <p>To find nearby stations: </p>\n            <button onClick={getStation}>Click me</button>\n\n                {/* <LocationTable \n                    locationData={locationData}\n                /> */}\n            \n        </>\n    );\n}\n\nexport default SearchPage;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,SAASC,WAAW,QAAQ,kBAAkB;AAC9C,OAAOC,aAAa,MAAM,gCAAgC;AAC1D,OAAOC,KAAK,MAAM,OAAO;AACzB,OAAOC,YAAY,MAAM,+BAA+B;AAAC;AAAA;AAEzD,OAAO,MAAMC,UAAU,GAAG,MAAM;EAAA;EAE5B,MAAM,CAACC,YAAY,EAAEC,eAAe,CAAC,GAAGP,QAAQ,CAAC,EAAE,CAAC;EACpD,MAAM,CAACQ,UAAU,EAAEC,aAAa,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EAChD,MAAM,CAACU,IAAI,EAAEC,OAAO,CAAC,GAAGX,QAAQ,CAAC,EAAE,CAAC;EACpC,MAAM,CAACY,KAAK,EAAEC,QAAQ,CAAC,GAAGb,QAAQ,CAAC,EAAE,CAAC;EAEtC,MAAMc,QAAQ,GAAGb,WAAW,EAAE;EAE9B,SAASc,UAAU,GAAG;IAClB,IAAIC,cAAc,GAAGR,UAAU,CAACS,KAAK,CAAC,GAAG,CAAC;IAC1C,IAAIC,gBAAgB,GAAGF,cAAc,CAACG,IAAI,CAAC,GAAG,CAAC;IAC/C,IAAIC,QAAQ,GAAGV,IAAI,CAACO,KAAK,CAAC,GAAG,CAAC;IAC9B,IAAII,UAAU,GAAGD,QAAQ,CAACD,IAAI,CAAC,GAAG,CAAC;IACnC,IAAIG,SAAS,GAAGV,KAAK,CAACK,KAAK,CAAC,GAAG,CAAC;IAChC,IAAIM,WAAW,GAAGD,SAAS,CAACH,IAAI,CAAC,GAAG,CAAC;IACrChB,KAAK,CAAC;MACJqB,MAAM,EAAE,KAAK;MACbC,GAAG,EAAC,WAAW,GAAGP,gBAAgB,GAAG,GAAG,GAAGG,UAAU,GAAG,GAAG,GAAGE;IAChE,CAAC,CAAC,CACDG,IAAI,CAAEC,QAAQ,IAAK;MAClB,MAAMC,GAAG,GAAED,QAAQ,CAACE,IAAI;MACxBtB,eAAe,CAAE;QACfuB,QAAQ,EAAEF,GAAG,CAACE,QAAQ;QACtBC,IAAI,EAAEH,GAAG,CAACG,IAAI;QACdC,QAAQ,EAAEJ,GAAG,CAACI;MACd,CAAC,CAAE;IACP,CAAC,CAAC,CAACC,KAAK,CAAEC,KAAK,IAAK;MAClB,IAAIA,KAAK,CAACP,QAAQ,EAAE;QAClBQ,OAAO,CAACC,GAAG,CAACF,KAAK,CAACP,QAAQ,CAAC;QAC3BQ,OAAO,CAACC,GAAG,CAACF,KAAK,CAACP,QAAQ,CAACU,MAAM,CAAC;QAClCF,OAAO,CAACC,GAAG,CAACF,KAAK,CAACP,QAAQ,CAACW,OAAO,CAAC;MACnC;IACJ,CAAC,CAAC;IACFxB,QAAQ,CAAC,GAAG,CAAC;EACf;EAEF,oBACI;IAAA,wBACI;MAAA,UAAI;IAA6B;MAAA;MAAA;MAAA;IAAA,QAAK,eAClC;MAAA,UAAG;IAA4C;MAAA;MAAA;MAAA;IAAA,QAAI,eAEnD,QAAC,YAAY;MACX,UAAU,EAAEN,UAAW;MACvB,aAAa,EAAEC,aAAc;MAC7B,IAAI,EAAEC,IAAK;MACX,OAAO,EAAEC,OAAQ;MACjB,KAAK,EAAEC,KAAM;MACb,QAAQ,EAAEC;IAAS;MAAA;MAAA;MAAA;IAAA,QACnB,eAEN;MAAA,UAAG;IAAyB;MAAA;MAAA;MAAA;IAAA,QAAI,eAChC;MAAQ,OAAO,EAAEE,UAAW;MAAA,UAAC;IAAQ;MAAA;MAAA;MAAA;IAAA,QAAS;EAAA,gBAM/C;AAEX,CAAC;AAAA,GA5DYV,UAAU;EAAA,QAOFJ,WAAW;AAAA;AAAA,KAPnBI,UAAU;AA8DvB,eAAeA,UAAU;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}
[{"/Users/afreddo/Portfolio/EV-Assist/frontend/src/index.js":"1","/Users/afreddo/Portfolio/EV-Assist/frontend/src/App.js":"2","/Users/afreddo/Portfolio/EV-Assist/frontend/src/reportWebVitals.js":"3","/Users/afreddo/Portfolio/EV-Assist/frontend/src/data_table/display_form_data_in_table.js":"4","/Users/afreddo/Portfolio/EV-Assist/frontend/src/data_table/form_input.js":"5","/Users/afreddo/Portfolio/EV-Assist/frontend/src/data_table/table.js":"6"},{"size":535,"mtime":1674186582690,"results":"7","hashOfConfig":"8"},{"size":1047,"mtime":1674341775481,"results":"9","hashOfConfig":"8"},{"size":362,"mtime":1674186582690,"results":"10","hashOfConfig":"8"},{"size":3727,"mtime":1674349032934,"results":"11","hashOfConfig":"8"},{"size":831,"mtime":1674337662779,"results":"12","hashOfConfig":"8"},{"size":781,"mtime":1674342180544,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","suppressedMessages":"16","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"17"},"187uzr7",{"filePath":"18","messages":"19","suppressedMessages":"20","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"21","messages":"22","suppressedMessages":"23","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"17"},{"filePath":"24","messages":"25","suppressedMessages":"26","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"27"},{"filePath":"28","messages":"29","suppressedMessages":"30","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"31","messages":"32","suppressedMessages":"33","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/afreddo/Portfolio/EV-Assist/frontend/src/index.js",[],[],[],"/Users/afreddo/Portfolio/EV-Assist/frontend/src/App.js",["34","35","36"],[],"/Users/afreddo/Portfolio/EV-Assist/frontend/src/reportWebVitals.js",[],[],"/Users/afreddo/Portfolio/EV-Assist/frontend/src/data_table/display_form_data_in_table.js",["37"],[],"import React from \"react\";\nimport { useState } from 'react'\nimport Table from \"./table\";\nimport '../App.css';\nimport axios from \"axios\";\n\nfunction Main(){\n\n  const [stationData, setStationData] = useState(null)\n  const [streetName, setStreetName] = useState(\"\");\n  const [city, setCity] = useState(\"\");\n  const [state, setState] = useState(\"\");\n\n    function getStation() {\n    var streetName_arr = streetName.split(\" \")\n    var streetName_ready = streetName_arr.join('+')\n    var city_arr = city.split(\" \")\n    var city_ready = city_arr.join('+')\n    var state_arr = state.split(\" \")\n    var state_ready = state_arr.join('+')\n    axios({\n      method: \"GET\",\n      url:\"/station/\" + streetName_ready + \"+\" + city_ready + \"+\" + state_ready,\n    })\n    .then((response) => {\n      const res =response.data\n      setStationData(({\n        location: res.location,\n        name: res.name,\n        distance: res.distance\n        }))\n    }).catch((error) => {\n      if (error.response) {\n        console.log(error.response)\n        console.log(error.response.status)\n        console.log(error.response.headers)\n        }\n    })}\n\n return(\n\n     <React.Fragment>\n     <body className=\"App-body\">\n         <form>\n          <label>Enter your Street name/address:\n            <input\n                type=\"text\"\n                value={streetName}\n                onChange={(e) => setStreetName(e.target.value)}\n            />\n          </label>\n          </form>\n\n          <form>\n          <label>Enter your city:\n            <input\n                type=\"text\"\n                value={city}\n                onChange={(e) => setCity(e.target.value)}\n            />\n          </label>\n          </form>\n\n          <form>\n          <label>Enter your state:\n            <input\n                type=\"text\"\n                value={state}\n                onChange={(e) => setState(e.target.value)}\n            />\n          </label>\n          </form>\n\n          {/* new line start*/}\n         <p>To find nearby stations: </p><button onClick={getStation}>Click me</button>\n          {stationData && <div>\n              <table className=\"App-table\">\n            <thead className=\"App-th\">\n                <tr>\n                    <th>Station Name</th>\n                    <th>Location</th>\n                    <th>Distance</th>\n                </tr>\n            </thead>\n            <tbody>\n                <td className=\"App-td\">{stationData.name[0]}</td>\n                <td className=\"App-td\">{stationData.location[0]}</td>\n                <td className=\"App-td\">{stationData.distance[0]}</td>\n            </tbody>\n            <tbody>\n                <td className=\"App-td\">{stationData.name[1]}</td>\n                <td className=\"App-td\">{stationData.location[1]}</td>\n                <td className=\"App-td\">{stationData.distance[1]}</td>\n            </tbody>\n            <tbody>\n                <td className=\"App-td\">{stationData.name[2]}</td>\n                <td className=\"App-td\">{stationData.location[2]}</td>\n                <td className=\"App-td\">{stationData.distance[2]}</td>\n            </tbody>\n            <tbody>\n                <td className=\"App-td\">{stationData.name[3]}</td>\n                <td className=\"App-td\">{stationData.location[3]}</td>\n                <td className=\"App-td\">{stationData.distance[3]}</td>\n            </tbody>\n            <tbody>\n                <td className=\"App-td\">{stationData.name[4]}</td>\n                <td className=\"App-td\">{stationData.location[4]}</td>\n                <td className=\"App-td\">{stationData.distance[4]}</td>\n            </tbody>\n        </table>\n            </div>\n          }\n         {/* end of new line */}\n    </body>\n     </React.Fragment>\n );\n}\nexport default Main;\n","/Users/afreddo/Portfolio/EV-Assist/frontend/src/data_table/form_input.js",[],[],"/Users/afreddo/Portfolio/EV-Assist/frontend/src/data_table/table.js",[],[],{"ruleId":"38","severity":1,"message":"39","line":1,"column":10,"nodeType":"40","messageId":"41","endLine":1,"endColumn":18},{"ruleId":"38","severity":1,"message":"42","line":2,"column":8,"nodeType":"40","messageId":"41","endLine":2,"endColumn":13},{"ruleId":"43","severity":1,"message":"44","line":16,"column":9,"nodeType":"45","endLine":18,"endColumn":10},{"ruleId":"38","severity":1,"message":"46","line":3,"column":8,"nodeType":"40","messageId":"41","endLine":3,"endColumn":13},"no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","'axios' is defined but never used.","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/HEAD/docs/rules/anchor-is-valid.md","JSXOpeningElement","'Table' is defined but never used."]